framework:
    rate_limiter:
        # define 2 rate limiters (one for username+IP, the other for IP)
        username_ip_login:
            policy: token_bucket
            limit: 5
            rate: { interval: '5 second' }

        ip_login:
            policy: sliding_window
            limit: 7
            interval: '15 second'

services:
    # our custom login rate limiter
    app.login_rate_limiter:
        class: Symfony\Component\Security\Http\RateLimiter\DefaultLoginRateLimiter
        arguments:
            # globalFactory is the limiter for IP
            $globalFactory: '@limiter.ip_login'
            # localFactory is the limiter for username+IP
            $localFactory: '@limiter.username_ip_login'
    # Symfony\Component\Security\Core\User\UserCheckerInterface: @App\Security\UserChecker

security:

    role_hierarchy:
        ROLE_TEAM_MANAGER: ["ROLE_USER","ROLE_ALLOWED_TO_SWITCH"]
        ROLE_PROJECT_MANAGER: ["ROLE_USER","ROLE_ALLOWED_TO_SWITCH"]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            # remember_me:
            #     secret: '%kernel.secret%'
            #     always_remember_me: true
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path : check_user_role
                always_use_default_target_path: false
            user_checker: App\Security\UserCheckerStatus

            switch_user: true



            login_throttling:
                limiter: app.login_rate_limiter
            logout:
                path: app_logout
        microsoft_login:
            lazy: true
            stateless: true
            json_login:
                check_path: /login/microsoft-login-completed    


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall


            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/Task, roles:  IS_AUTHENTICATED_FULLY}
        - { path: ^/Profile, roles:  IS_AUTHENTICATED_FULLY}
        - { path: ^/showMyCheckinCheckOut, roles:  IS_AUTHENTICATED_FULLY}
        - { path: ^/Meetings, roles:  IS_AUTHENTICATED_FULLY}
        - { path: ^/pdf, roles:  IS_AUTHENTICATED_FULLY}
        - { path: ^/TeamManager, roles:  ROLE_TEAM_MANAGER}
        - { path: ^/ProjectManager, roles: ROLE_PROJECT_MANAGER }
        - { path: ^/Employee, roles:  ROLE_USER}
        # - { path: ^/profile, roles: ROLE_USER }


# // define(ROLE_USER)="ROLE_USER"
# // ROLE_ADMIN="ROLE_PROJECT_MANAGER"
# // ROLE_MASTER_ADMIN="ROLE_TEAM_MANAGER"

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon